{"version":3,"sources":["components/Title/Title.jsx","components/Sheets/BalloonSheet.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","className","GoogleSpreadsheet","require","Styles","styled","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","style","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","key","fuzzyTextFilterFn","rows","matchSorter","keys","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","colSpan","textAlign","getRowProps","cells","cell","getCellProps","autoRemove","val","BalloonSheet","Header","accessor","googleSheetsData","Time","Date","Color","Location","Contents","console","log","App","Col","Row","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.239d3d60.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.css';\n\nfunction Title() {\n  return (\n    <div className=\"centered-div\">\n      <h5 className='title-style'>Lilly's ACNH-Balloons Stats!</h5>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter'\n\nimport makeData from './makeData'\n\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n\n// spreadsheet key is the long id in the sheets URL\nconst doc = new GoogleSpreadsheet('1WmX-a3t3GDxkb7Yx1fxIKIJ5IIks4c8xj6raRGyCvKE');\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = React.useState(globalFilter)\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={e => {\n          setFilter(parseInt(e.target.value, 10))\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <input\n        value={filterValue[0] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: '70px',\n          marginRight: '0.5rem',\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: '70px',\n          marginLeft: '0.5rem',\n        }}\n      />\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Our table component\nfunction Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  )\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 10)\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: 'left',\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n\n    </>\n  )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= filterValue\n  })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\n\nfunction BalloonSheet() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Balloon Data',\n        columns: [\n          {\n            Header: 'Time',\n            accessor: 'Time',\n            filter: 'fuzzyText',\n          },\n          {\n            Header: 'Date',\n            accessor: 'Date',\n            filter: 'fuzzyText',\n          },\n          {\n            Header: 'Color',\n            accessor: 'Color',\n            Filter: SelectColumnFilter,\n            filter: 'includes',\n          },\n          {\n            Header: 'Location',\n            accessor: 'Location',\n            filter: 'fuzzyText',\n          },\n          {\n            Header: 'Contents',\n            accessor: 'Contents',\n            filter: 'fuzzyText',\n          },\n        ],\n      },\n    ],\n    []\n  )\n  const googleSheetsData = [\n    {Time: '10:03 PM', Date: '06/12/20', Color: 'yellow', Location: '5C (Right Side) bottom', Contents: '10,000 Bells'},\n    {Time: '10:52 PM', Date: '06/12/20', Color: 'yellow', Location: '5C', Contents: 'NA'}\n  ]\n  console.log(googleSheetsData)\n\n  return (\n    <Styles >\n      <Table columns={columns} data={googleSheetsData} />\n    </Styles>\n  )\n}\n\nexport default BalloonSheet\n","import React from 'react';\nimport './App.css';\nimport Title from './components/Title/Title.jsx'\nimport BalloonSheet from './components/Sheets/BalloonSheet.jsx'\nimport {Col, Row} from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div>\n      <Col>\n        <Row>\n          <Col>\n            <Title />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <BalloonSheet />\n          </Col>\n        </Row>\n      </Col>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}